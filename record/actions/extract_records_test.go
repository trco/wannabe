package actions

import (
	"reflect"
	"testing"
	"time"
	"wannabe/types"
)

func TestExtractRecords(t *testing.T) {
	records, _ := ExtractRecords(requestBody)
	record := records[0]

	if !reflect.DeepEqual(expectedRecordB, record) {
		t.Errorf("expected record: %v, actual record: %v", expectedRecordB, record)
	}
}

// reusable variables
var expectedRecordB = types.Record{
	Request: types.Request{
		HttpMethod: "POST",
		Host:       "https://analyticsdata.googleapis.com",
		Path:       "test",
		Query: map[string][]string{
			"test": {"test"},
		},
		Headers: map[string][]string{
			"Content-Type": {"application/json"},
		},
		Body: map[string]interface{}{
			"test": "test",
		},
	},
	Response: types.Response{
		StatusCode: 200,
		Headers: map[string][]string{
			"Content-Type": {"application/json"},
		},
		Body: map[string]interface{}{
			"test": "test",
		},
	},
	Metadata: types.Metadata{
		GeneratedAt: types.Timestamp{
			Unix: 0,
			UTC:  time.Time{},
		},
		RegeneratedAt: types.Timestamp{
			Unix: 0,
			UTC:  time.Time{},
		},
	},
}

var requestBody = [][]byte{
	{123, 34, 114, 101, 113, 117, 101, 115, 116, 34, 58, 123, 34, 104, 97, 115, 104, 34, 58, 34, 34, 44,
		34, 99, 117, 114, 108, 34, 58, 34, 34, 44, 34, 104, 116, 116, 112, 77, 101, 116, 104, 111, 100, 34, 58, 34, 80, 79, 83,
		84, 34, 44, 34, 104, 111, 115, 116, 34, 58, 34, 104, 116, 116, 112, 115, 58, 47, 47, 97, 110, 97, 108, 121, 116, 105, 99,
		115, 100, 97, 116, 97, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99, 111, 109, 34, 44, 34, 112, 97, 116, 104,
		34, 58, 34, 116, 101, 115, 116, 34, 44, 34, 113, 117, 101, 114, 121, 34, 58, 123, 34, 116, 101, 115, 116, 34, 58, 91, 34,
		116, 101, 115, 116, 34, 93, 125, 44, 34, 104, 101, 97, 100, 101, 114, 115, 34, 58, 123, 34, 67, 111, 110, 116, 101, 110,
		116, 45, 84, 121, 112, 101, 34, 58, 91, 34, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110,
		34, 93, 125, 44, 34, 98, 111, 100, 121, 34, 58, 123, 34, 116, 101, 115, 116, 34, 58, 34, 116, 101, 115, 116, 34, 125, 125,
		44, 34, 114, 101, 115, 112, 111, 110, 115, 101, 34, 58, 123, 34, 115, 116, 97, 116, 117, 115, 67, 111, 100, 101, 34, 58,
		50, 48, 48, 44, 34, 104, 101, 97, 100, 101, 114, 115, 34, 58, 123, 34, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112,
		101, 34, 58, 91, 34, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 34, 93, 125, 44, 34, 98,
		111, 100, 121, 34, 58, 123, 34, 116, 101, 115, 116, 34, 58, 34, 116, 101, 115, 116, 34, 125, 125, 44, 34, 109, 101, 116, 97,
		100, 97, 116, 97, 34, 58, 123, 34, 103, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 34, 58, 123, 34, 117, 110, 105, 120,
		34, 58, 48, 44, 34, 117, 116, 99, 34, 58, 34, 48, 48, 48, 49, 45, 48, 49, 45, 48, 49, 84, 48, 48, 58, 48, 48, 58, 48, 48, 90,
		34, 125, 44, 34, 114, 101, 103, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 34, 58, 123, 34, 117, 110, 105, 120, 34, 58, 48,
		44, 34, 117, 116, 99, 34, 58, 34, 48, 48, 48, 49, 45, 48, 49, 45, 48, 49, 84, 48, 48, 58, 48, 48, 58, 48, 48, 90, 34, 125, 125, 125},
}
